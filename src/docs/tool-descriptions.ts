/**
 * Enhanced tool descriptions shown to client LLMs with improved documentation,
 * examples, and troubleshooting guidance.
 * 
 * Key Concepts:
 * 1. Path-based Hierarchy: Tasks are organized in a hierarchical structure using paths
 * 2. Task Types: Tasks can be milestones, groups, or individual tasks
 * 3. Dependencies: Tasks can depend on other tasks, enforcing execution order
 * 4. Status Lifecycle: Tasks progress through states (pending -> in_progress -> completed/failed)
 * 5. LLM Context: Tasks track tools used, resources accessed, and reasoning
 */

export const toolDescriptions = {
    create_task: {
        name: "create_task",
        description: [
            "Creates a new task with path-based hierarchy. Tasks are organized using paths (e.g., 'project/feature/subtask') and can track LLM operations and reasoning.",
            "",
            "Key Requirements:",
            "1. Task Types (MUST BE UPPERCASE):",
            "   - TASK: Individual work items (cannot contain subtasks)",
            "   - GROUP: Organizational containers for related tasks",
            "   - MILESTONE: Project phases or major deliverables",
            "",
            "2. Parent Task Rules:",
            "   - GROUP and MILESTONE tasks can contain subtasks",
            "   - TASK type cannot contain subtasks",
            "   - Different status propagation rules for groups vs milestones",
            "",
            "3. Dependencies:",
            "   - Must be specified at root level, not in metadata",
            "   - Example: \"dependencies\": [\"path/to/dependency\"]",
            "   - Maximum 50 dependencies per task",
            "   - All dependency paths must exist",
            "",
            "4. Size Limits:",
            "   - Name: 200 characters",
            "   - Description/Reasoning: 2000 characters",
            "   - Notes: 1000 characters each, max 100 notes",
            "   - Dependencies: Max 50 tasks",
            "   - Subtasks: Max 100 tasks",
            "   - Tags/Tools/Resources: Max 100 items, 100 chars each",
            "",
            "5. Task names must be unique within their parent",
            "",
            "Task Status Lifecycle:",
            "1. pending: Initial state, not started",
            "2. in_progress: Work has begun",
            "3. blocked: Cannot proceed due to dependencies",
            "4. completed: Successfully finished",
            "5. failed: Could not be completed",
            "",
            "Status Propagation Rules:",
            "1. Group Tasks:",
            "   - blocked: Any subtask is blocked",
            "   - failed: Any subtask failed",
            "   - in_progress: Any subtask in progress",
            "   - completed: All subtasks completed",
            "",
            "2. Milestone Tasks:",
            "   - completed: All subtasks must be completed",
            "   - failed: Any subtask failed",
            "   - blocked: Any subtask blocked",
            "   - in_progress: Any subtask pending/in_progress",
            "",
            "Example Usage:",
            "",
            "1. Create Code Analysis Project:",
            "```json",
            "{",
            '  "name": "Codebase Analysis",',
            '  "type": "MILESTONE",',
            '  "description": "Analyze and improve codebase using LLM capabilities",',
            '  "metadata": {',
            '    "priority": "high",',
            '    "tags": ["analysis", "improvement"],',
            '    "reasoning": "Systematic code review needed to identify patterns and suggest improvements",',
            '    "toolsUsed": ["list_code_definition_names", "search_files", "read_file"],',
            '    "contextUsed": ["Project structure", "Code patterns", "Best practices"]',
            '  }',
            "}",
            "```",
            "",
            "2. Create Task with Dependencies:",
            "```json",
            "{",
            '  "name": "Deploy API",',
            '  "type": "TASK",',
            '  "path": "server/deployment",',
            '  "dependencies": ["server/auth/jwt", "server/api/validation"],',
            '  "metadata": {',
            '    "priority": "high",',
            '    "reasoning": "Deploy after security features are complete"',
            '  }',
            "}",
            "```",
            "",
            "3. Create Group with Subtasks:",
            "```json",
            "{",
            '  "name": "Authentication System",',
            '  "type": "GROUP",',
            '  "path": "server/auth",',
            '  "metadata": {',
            '    "priority": "high",',
            '    "tags": ["security"]',
            '  }',
            "}",
            "```",
            "",
            "Common Errors and Solutions:",
            "1. Task Type Issues:",
            "   - Must use uppercase: TASK, GROUP, MILESTONE",
            "   - Regular TASK cannot have subtasks",
            "   - Only GROUP and MILESTONE can contain subtasks",
            "",
            "2. Dependency Issues:",
            "   - Dependencies must be at root level, not in metadata",
            "   - All dependency paths must exist",
            "   - Maximum 50 dependencies per task",
            "",
            "3. Path Issues:",
            "   - Keep hierarchy depth under 8 levels",
            "   - Use only alphanumeric, underscore, dot, hyphen",
            "   - Ensure unique task names within parents",
            "",
            "4. Size Limits:",
            "   - Follow character limits for all fields",
            "   - Break large tasks into subtasks",
            "   - Use concise but descriptive names"
        ].join('\n'),
        parameters: {
            parentPath: {
                description: [
                    "Path of the parent task. Used to create hierarchical task structures. Examples:",
                    "- undefined (for root/project-level tasks)",
                    '- "codebase-analysis" (for tasks under the root project)',
                    '- "codebase-analysis/pattern-analysis" (for nested tasks)',
                    "",
                    "Best practices:",
                    "- Keep hierarchies shallow (max 8 levels)",
                    "- Use descriptive path segments",
                    "- Verify parent path exists",
                    "- Follow kebab-case naming"
                ].join('\n')
            },
            name: {
                description: [
                    "Name of the task (max 200 characters). Examples:",
                    '- "Implement User Authentication"',
                    '- "Design System Setup"',
                    '- "Performance Optimization"',
                    "",
                    "Best practices:",
                    "- Use clear, action-oriented names",
                    "- Describe the outcome",
                    "- Keep names concise but descriptive",
                    '- Avoid generic terms like "Update" or "Fix"'
                ].join('\n'),
                required: true
            },
            description: {
                description: [
                    "Description of the task (max 2000 characters). Example:",
                    "```markdown",
                    "# Authentication System Implementation",
                    "",
                    "## Objectives",
                    "- Secure user authentication",
                    "- Password reset flow",
                    "- Session management",
                    "",
                    "## Acceptance Criteria",
                    "1. Users can sign up and login",
                    "2. Password reset emails work",
                    "3. Sessions expire after 24h",
                    "```"
                ].join('\n')
            },
            notes: {
                description: [
                    "Rich notes associated with the task. Examples:",
                    "",
                    "Markdown note:",
                    "```markdown",
                    "## Implementation Notes",
                    "- Using JWT for auth",
                    "- Redis for session store",
                    "- Rate limiting on auth endpoints",
                    "```",
                    "",
                    "Code note:",
                    "```typescript",
                    "type: 'code',",
                    "content: 'function validatePassword(pwd: string): boolean {",
                    "  return pwd.length >= 8;",
                    "}',",
                    "language: 'typescript'",
                    "```",
                    "",
                    "Best practices:",
                    "- Use appropriate note types",
                    "- Include relevant code examples",
                    "- Keep notes focused and organized"
                ].join('\n')
            },
            reasoning: {
                description: [
                    "Reasoning and decision-making documentation. Example:",
                    "```json",
                    "{",
                    '  "approach": "Using JWT with Redis for scalable auth",',
                    '  "alternatives": [',
                    '    "Session-based auth - Less scalable",',
                    '    "OAuth only - More complex"',
                    "  ],",
                    '  "tradeoffs": [',
                    '    "JWT size vs session lookup",',
                    '    "Implementation complexity vs security"',
                    "  ]",
                    "}",
                    "```"
                ].join('\n')
            },
            type: {
                description: [
                    "Type of task. Options (MUST BE UPPERCASE):",
                    "- MILESTONE: Project phases or major deliverables (can contain subtasks)",
                    "- GROUP: Organizational containers for related tasks",
                    "- TASK: Individual work items (cannot contain subtasks)",
                    "",
                    "Best practices:",
                    "- Use MILESTONE for project phases",
                    "- Use GROUP for feature sets",
                    "- Use TASK for concrete work",
                    "",
                    "Example hierarchy:",
                    '- MILESTONE: "Q1 Development"',
                    '  - MILESTONE: "Design Phase"',
                    '    - TASK: "UI Design"',
                    '    - TASK: "API Design"',
                    '  - GROUP: "Implementation"',
                    '    - TASK: "Frontend Features"',
                    '    - TASK: "Backend Services"'
                ].join('\n')
            },
            dependencies: {
                description: [
                    "List of task paths this task depends on. Must be at root level, not in metadata. Example:",
                    "```json",
                    "{",
                    '  "dependencies": [',
                    '    "server/auth/jwt",',
                    '    "server/api/validation"',
                    "  ]",
                    "}",
                    "```",
                    "",
                    "Best practices:",
                    "- Keep dependencies minimal",
                    "- Document dependency rationale",
                    "- Consider task ordering",
                    "- Maximum 50 dependencies",
                    "- All paths must exist"
                ].join('\n')
            },
            metadata: {
                description: [
                    "LLM-specific task metadata for tracking reasoning and tool usage. Example:",
                    "```json",
                    "{",
                    '  "priority": "high",',
                    '  "tags": ["code-analysis", "automation"],',
                    '  "reasoning": "Using static analysis to identify optimization opportunities",',
                    '  "toolsUsed": [',
                    '    "list_code_definition_names",',
                    '    "search_files",',
                    '    "read_file"',
                    '  ],',
                    '  "resourcesAccessed": [',
                    '    "src/types/*.ts",',
                    '    "src/validation/*.ts"',
                    '  ],',
                    '  "contextUsed": [',
                    '    "Project structure analysis",',
                    '    "TypeScript type definitions",',
                    '    "Code patterns found in codebase"',
                    '  ]',
                    "}",
                    "```",
                    "",
                    "Size Limits:",
                    "- Tags: Max 100 items, 100 chars each",
                    "- Tools/Resources: Max 100 items, 100 chars each",
                    "- Reasoning: Max 2000 chars",
                    "- Context items: Max 100 items, 1000 chars each"
                ].join('\n')
            },
            subtasks: {
                description: [
                    "Nested subtasks for breaking down work items. Max 100 subtasks per task. Example:",
                    "```json",
                    "{",
                    '  "subtasks": [',
                    "    {",
                    '      "name": "Analyze Code Structure",',
                    '      "type": "TASK",',
                    '      "metadata": {',
                    '        "toolsUsed": ["list_code_definition_names"],',
                    '        "reasoning": "Map codebase structure for optimization planning"',
                    '      }',
                    "    },",
                    "    {",
                    '      "name": "Identify Patterns",',
                    '      "type": "TASK",',
                    '      "metadata": {',
                    '        "toolsUsed": ["search_files"],',
                    '        "reasoning": "Find common patterns for potential refactoring"',
                    '      }',
                    "    }",
                    "  ]",
                    "}",
                    "```"
                ].join('\n')
            }
        }
    },

    // ... rest of the tool descriptions remain unchanged ...
};
