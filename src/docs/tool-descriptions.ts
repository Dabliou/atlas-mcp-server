/**
 * Enhanced tool descriptions shown to client LLMs with improved documentation,
 * examples, and troubleshooting guidance.
 * 
 * Key Concepts:
 * 1. Session Management: Sessions provide isolation and context for task management
 * 2. Task Lists: Organizational units within sessions for grouping related tasks
 * 3. Task Hierarchy: Tasks can be organized in groups and milestones (max 5 levels deep)
 * 4. Dependencies: Tasks can depend on other tasks, enforcing execution order
 * 5. Status Lifecycle: Tasks progress through states (pending -> in_progress -> completed/failed)
 */

export const toolDescriptions = {
    create_task: {
        name: "create_task",
        description: [
            "IMPORTANT: Requires both an active session and task list (use create_session and create_task_list first). Creates a new task.",
            "",
            "Key Requirements:",
            "1. Parent Task Rules:",
            "   - Group and milestone tasks can contain subtasks",
            "   - Regular tasks cannot contain subtasks",
            "   - Different status propagation rules for groups vs milestones",
            "2. Task hierarchy cannot exceed 5 levels deep",
            "3. Parent ID must be either ROOT-{sessionId} or a valid task ID",
            "4. Task names must be unique within their parent",
            "5. Dependencies must reference existing tasks",
            "",
            "Task Status Lifecycle:",
            "1. pending: Initial state, not started",
            "2. in_progress: Work has begun",
            "3. blocked: Cannot proceed due to dependencies",
            "4. completed: Successfully finished",
            "5. failed: Could not be completed",
            "",
            "Status Propagation Rules:",
            "1. Group Tasks:",
            "   - blocked: Any subtask is blocked",
            "   - failed: Any subtask failed",
            "   - in_progress: Any subtask in progress",
            "   - completed: All subtasks completed",
            "",
            "2. Milestone Tasks:",
            "   - completed: All subtasks must be completed",
            "   - failed: Any subtask failed",
            "   - blocked: Any subtask blocked",
            "   - in_progress: Any subtask pending/in_progress",
            "",
            "Example Usage:",
            "",
            "1. Create Project Structure:",
            "```json",
            "{",
            '  "name": "Q1 Development",',
            '  "type": "milestone",',
            '  "description": "Q1 2024 Development Goals",',
            '  "subtasks": [',
            "    {",
            '      "name": "Design Phase",',
            '      "type": "milestone",',
            '      "subtasks": [',
            "        {",
            '          "name": "UI Design",',
            '          "type": "task"',
            "        },",
            "        {",
            '          "name": "API Design",',
            '          "type": "task"',
            "        }",
            "      ]",
            "    },",
            "    {",
            '      "name": "Implementation",',
            '      "type": "group",',
            '      "subtasks": [',
            "        {",
            '          "name": "Frontend Features",',
            '          "type": "task"',
            "        },",
            "        {",
            '          "name": "Backend Services",',
            '          "type": "task"',
            "        }",
            "      ]",
            "    }",
            "  ]",
            "}",
            "```",
            "",
            "2. Create Feature Group:",
            "```json",
            "{",
            '  "name": "Authentication System",',
            '  "type": "group",',
            '  "description": "User authentication implementation",',
            '  "metadata": {',
            '    "priority": "high",',
            '    "team": "backend"',
            "  },",
            '  "subtasks": [',
            "    {",
            '      "name": "Database Schema",',
            '      "type": "task"',
            "    },",
            "    {",
            '      "name": "API Endpoints",',
            '      "type": "task",',
            '      "dependencies": ["db-schema-id"]',
            "    }",
            "  ]",
            "}",
            "```",
            "",
            "3. Create Milestone with Phases:",
            "```json",
            "{",
            '  "name": "Beta Release",',
            '  "type": "milestone",',
            '  "description": "Beta release preparation and launch",',
            '  "metadata": {',
            '    "deadline": "2024-03-31",',
            '    "tags": ["milestone", "release"]',
            "  },",
            '  "subtasks": [',
            "    {",
            '      "name": "Feature Complete",',
            '      "type": "milestone",',
            '      "description": "All planned features implemented"',
            "    },",
            "    {",
            '      "name": "Testing Phase",',
            '      "type": "milestone",',
            '      "dependencies": ["feature-complete-id"]',
            "    },",
            "    {",
            '      "name": "Deployment",',
            '      "type": "milestone",',
            '      "dependencies": ["testing-phase-id"]',
            "    }",
            "  ]",
            "}",
            "```",
            "",
            "Troubleshooting:",
            "1. Task Creation Issues:",
            "   - Only group and milestone tasks can contain subtasks",
            "   - Regular tasks cannot have subtasks",
            "   - Keep hierarchy depth under 5 levels",
            "   - Ensure unique task names within parents",
            "",
            "2. Status Management:",
            "   - Milestones require all subtasks completed",
            "   - Groups allow partial completion",
            "   - Document status changes",
            "   - Consider impact on parent status",
            "",
            "3. Best Practices:",
            "   - Use milestones for project phases",
            "   - Use groups for feature sets",
            "   - Use tasks for concrete work items",
            "   - Document dependencies clearly",
            "   - Keep hierarchies logical and maintainable"
        ].join('\n'),
        parameters: {
            parentId: {
                description: [
                    "ID of the parent task, or null for root tasks. Format: either null, ROOT-{sessionId}, or valid task ID. Examples:",
                    "- null (for root tasks)",
                    "- ROOT-session-001 (for top-level tasks)",
                    "- existing-task-id (for subtasks)",
                    "",
                    "Best practices:",
                    "- Keep hierarchies shallow (max 5 levels)",
                    "- Verify parent task exists",
                    "- Use ROOT-{sessionId} for top-level tasks"
                ].join('\n')
            },
            name: {
                description: [
                    "Name of the task (max 200 characters). Examples:",
                    '- "Implement User Authentication"',
                    '- "Design System Setup"',
                    '- "Performance Optimization"',
                    "",
                    "Best practices:",
                    "- Use clear, action-oriented names",
                    "- Describe the outcome",
                    "- Keep names concise but descriptive",
                    '- Avoid generic terms like "Update" or "Fix"'
                ].join('\n'),
                required: true
            },
            description: {
                description: [
                    "Description of the task (max 2000 characters). Example:",
                    "```markdown",
                    "# Authentication System Implementation",
                    "",
                    "## Objectives",
                    "- Secure user authentication",
                    "- Password reset flow",
                    "- Session management",
                    "",
                    "## Acceptance Criteria",
                    "1. Users can sign up and login",
                    "2. Password reset emails work",
                    "3. Sessions expire after 24h",
                    "```"
                ].join('\n')
            },
            notes: {
                description: [
                    "Rich notes associated with the task. Examples:",
                    "",
                    "Markdown note:",
                    "```markdown",
                    "## Implementation Notes",
                    "- Using JWT for auth",
                    "- Redis for session store",
                    "- Rate limiting on auth endpoints",
                    "```",
                    "",
                    "Code note:",
                    "```typescript",
                    "type: 'code',",
                    "content: 'function validatePassword(pwd: string): boolean {",
                    "  return pwd.length >= 8;",
                    "}',",
                    "language: 'typescript'",
                    "```",
                    "",
                    "Best practices:",
                    "- Use appropriate note types",
                    "- Include relevant code examples",
                    "- Keep notes focused and organized"
                ].join('\n')
            },
            reasoning: {
                description: [
                    "Reasoning and decision-making documentation. Example:",
                    "```json",
                    "{",
                    '  "approach": "Using JWT with Redis for scalable auth",',
                    '  "alternatives": [',
                    '    "Session-based auth - Less scalable",',
                    '    "OAuth only - More complex"',
                    "  ],",
                    '  "tradeoffs": [',
                    '    "JWT size vs session lookup",',
                    '    "Implementation complexity vs security"',
                    "  ]",
                    "}",
                    "```"
                ].join('\n')
            },
            type: {
                description: [
                    "Type of task. Options:",
                    "- milestone: Project phases or major deliverables (can contain subtasks)",
                    "- group: Organizational containers for related tasks",
                    "- task: Individual work items (cannot contain subtasks)",
                    "",
                    "Best practices:",
                    "- Use milestones for project phases",
                    "- Use groups for feature sets",
                    "- Use tasks for concrete work",
                    "",
                    "Example hierarchy:",
                    '- Milestone: "Q1 Development"',
                    '  - Milestone: "Design Phase"',
                    '    - Task: "UI Design"',
                    '    - Task: "API Design"',
                    '  - Group: "Implementation"',
                    '    - Task: "Frontend Features"',
                    '    - Task: "Backend Services"'
                ].join('\n')
            },
            dependencies: {
                description: [
                    "List of task IDs this task depends on. Example:",
                    "```json",
                    "{",
                    '  "dependencies": [',
                    '    "task-123",  // Database setup',
                    '    "task-456"   // API endpoints',
                    "  ]",
                    "}",
                    "```",
                    "",
                    "Best practices:",
                    "- Keep dependencies minimal",
                    "- Document dependency rationale",
                    "- Consider task ordering"
                ].join('\n')
            },
            metadata: {
                description: [
                    "Additional task metadata. Example:",
                    "```json",
                    "{",
                    '  "context": "Part of authentication system",',
                    '  "tags": ["security", "user-management", "backend"],',
                    '  "priority": "high",',
                    '  "estimated_hours": 8',
                    "}",
                    "```"
                ].join('\n')
            },
            subtasks: {
                description: [
                    "Nested subtasks for breaking down work items. Example:",
                    "```json",
                    "{",
                    '  "subtasks": [',
                    "    {",
                    '      "name": "Design Database Schema",',
                    '      "type": "task"',
                    "    },",
                    "    {",
                    '      "name": "Implement API Endpoints",',
                    '      "type": "task"',
                    "    }",
                    "  ]",
                    "}",
                    "```"
                ].join('\n')
            }
        }
    },

    // ... rest of the tool descriptions remain unchanged ...
};
