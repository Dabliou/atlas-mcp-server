{
  "id": "software_engineer/system_architect",
  "name": "LLM System Architect Agent",
  "description": "Comprehensive system architecture and technical design planning with focus on scalability, maintainability, and security",
  "version": "1.1.0",
  "author": "Atlas Team",
  "tags": ["llm-agent", "architecture", "system-design", "technical-planning"],
  "variables": [
    {
      "name": "projectName",
      "description": "Name of the project/product",
      "type": "string",
      "required": true
    },
    {
      "name": "scalingRequirements",
      "description": "Expected scale of the system",
      "type": "string",
      "required": true,
      "default": "growth",
      "enum": ["startup", "growth", "enterprise"]
    },
    {
      "name": "securityLevel",
      "description": "Required security level",
      "type": "string",
      "required": true,
      "default": "standard",
      "enum": ["standard", "high", "regulated"]
    },
    {
      "name": "enableDistributed",
      "description": "Enable distributed system architecture",
      "type": "boolean",
      "required": false,
      "default": false
    },
    {
      "name": "performanceTargets",
      "description": "Performance targets in milliseconds",
      "type": "number",
      "required": false,
      "default": 100
    }
  ],
  "tasks": [
    {
      "path": "${projectName}/architecture/requirements",
      "title": "Architecture Requirements Analysis",
      "description": "Analyze and document system requirements and constraints",
      "type": "MILESTONE",
      "metadata": {
        "priority": "high",
        "tags": ["requirements", "analysis"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["plantuml", "mermaid", "draw.io"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Functional requirements analyzed",
            "Non-functional requirements documented",
            "System constraints identified",
            "Stakeholder requirements validated"
          ],
          "testCases": [
            "Review requirements completeness",
            "Validate constraints documentation",
            "Test requirements traceability",
            "Verify stakeholder sign-off"
          ]
        }
      }
    },
    {
      "path": "${projectName}/architecture/requirements/functional",
      "title": "Functional Requirements Analysis",
      "description": "Analyze core functional requirements and system capabilities",
      "type": "TASK",
      "dependencies": ["${projectName}/architecture/requirements"],
      "metadata": {
        "priority": "high",
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["swagger-ui", "openapi-typescript", "json-schema"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Core functionality mapped",
            "System capabilities defined",
            "Integration requirements documented",
            "Data flow diagrams created"
          ],
          "testCases": [
            "Validate functionality mapping",
            "Review capability definitions",
            "Test integration requirements",
            "Check data flow accuracy"
          ]
        }
      }
    },
    {
      "path": "${projectName}/architecture/requirements/non-functional",
      "title": "Non-Functional Requirements Analysis",
      "description": "Define and document non-functional requirements",
      "type": "TASK",
      "dependencies": ["${projectName}/architecture/requirements"],
      "metadata": {
        "priority": "high",
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["k6", "artillery", "prometheus"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Performance requirements defined",
            "Scalability targets set",
            "Reliability objectives documented",
            "Maintainability guidelines created"
          ],
          "testCases": [
            "Benchmark performance targets",
            "Test scalability requirements",
            "Validate reliability metrics",
            "Review maintainability criteria"
          ]
        }
      }
    },
    {
      "path": "${projectName}/architecture/design",
      "title": "System Architecture Design",
      "description": "Design high-level system architecture and component interactions",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/architecture/requirements"],
      "metadata": {
        "priority": "high",
        "tags": ["design", "architecture"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["c4-model", "archimate", "structurizr"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "System components defined",
            "Integration patterns selected",
            "Data architecture designed",
            "Security architecture integrated"
          ],
          "testCases": [
            "Review component definitions",
            "Validate integration patterns",
            "Test data architecture",
            "Verify security integration"
          ]
        }
      }
    },
    {
      "path": "${projectName}/architecture/design/components",
      "title": "Component Architecture Design",
      "description": "Design system components and their interactions",
      "type": "TASK",
      "dependencies": ["${projectName}/architecture/design"],
      "metadata": {
        "priority": "high",
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["inversify", "typeorm", "graphql"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Component specifications created",
            "Interface definitions documented",
            "Communication patterns defined",
            "State management designed"
          ],
          "testCases": [
            "Validate component specs",
            "Test interface contracts",
            "Review communication flows",
            "Verify state handling"
          ]
        }
      }
    },
    {
      "path": "${projectName}/architecture/design/data",
      "title": "Data Architecture Design",
      "description": "Design data storage, flow, and management systems",
      "type": "TASK",
      "dependencies": ["${projectName}/architecture/design"],
      "metadata": {
        "priority": "high",
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["prisma", "redis", "elasticsearch"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Data model diagrams created",
            "Storage architecture defined",
            "Data flow patterns documented",
            "Caching strategy designed"
          ],
          "testCases": [
            "Validate data models",
            "Test storage architecture",
            "Review data flows",
            "Verify caching strategy"
          ]
        }
      }
    },
    {
      "path": "${projectName}/architecture/technology",
      "title": "Technology Stack Selection",
      "description": "Select and document technology stack decisions",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/architecture/design"],
      "metadata": {
        "priority": "high",
        "tags": ["technology", "stack"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["webpack", "docker", "kubernetes"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Technology choices justified",
            "Stack compatibility verified",
            "Learning curve assessed",
            "Community support evaluated"
          ],
          "testCases": [
            "Review technology choices",
            "Test stack compatibility",
            "Assess learning resources",
            "Validate community metrics"
          ]
        }
      }
    }
  ]
}
