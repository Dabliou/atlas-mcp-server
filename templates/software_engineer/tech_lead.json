{
  "id": "software_engineer/tech_lead",
  "name": "LLM Technical Team Lead Agent",
  "description": "Technical leadership focusing on development coordination, code quality, and team productivity",
  "version": "1.1.0",
  "author": "Atlas Team",
  "tags": ["llm-agent", "technical-leadership", "team-coordination", "development"],
  "variables": [
    {
      "name": "projectName",
      "description": "Name of the project/product",
      "type": "string",
      "required": true
    },
    {
      "name": "teamScale",
      "description": "Size/scale of the team",
      "type": "string",
      "required": true,
      "default": "growth",
      "enum": ["startup", "growth", "enterprise"]
    },
    {
      "name": "methodology",
      "description": "Development methodology",
      "type": "string",
      "required": false,
      "default": "agile",
      "enum": ["agile", "kanban"]
    },
    {
      "name": "enableAutomation",
      "description": "Enable automated quality checks and workflows",
      "type": "boolean",
      "required": false,
      "default": true
    }
  ],
  "tasks": [
    {
      "path": "${projectName}",
      "title": "Project Root",
      "description": "Root task for project organization",
      "type": "MILESTONE",
      "metadata": {
        "priority": "high",
        "tags": ["project-root"]
      }
    },
    {
      "path": "${projectName}/development",
      "title": "Development Leadership",
      "description": "Overall development coordination and technical leadership",
      "type": "MILESTONE",
      "dependencies": ["${projectName}"],
      "metadata": {
        "priority": "high",
        "tags": ["development", "leadership"],
        "acceptanceCriteria": [
          "Development standards established",
          "Workflows defined and implemented",
          "Quality processes in place",
          "Team coordination effective"
        ]
      }
    },
    {
      "path": "${projectName}/development/standards",
      "title": "Development Standards Setup",
      "description": "Establish development standards and best practices",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/development"],
      "metadata": {
        "priority": "high",
        "tags": ["standards", "best-practices"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["eslint", "prettier", "husky"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Coding standards documented",
            "Best practices established",
            "Review process defined",
            "Quality metrics selected"
          ],
          "testCases": [
            "Validate coding standards documentation",
            "Review best practices implementation",
            "Test code review workflow",
            "Verify quality metrics tracking"
          ]
        }
      }
    },
    {
      "path": "${projectName}/development/standards/code",
      "title": "Coding Standards Definition",
      "description": "Define and document coding standards",
      "type": "TASK",
      "dependencies": ["${projectName}/development/standards"],
      "metadata": {
        "priority": "high",
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": [
            "typescript",
            "@typescript-eslint/parser",
            "@typescript-eslint/eslint-plugin"
          ],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Style guide created",
            "Naming conventions defined",
            "Code organization rules established",
            "Documentation requirements specified"
          ],
          "testCases": [
            "Verify style guide compliance",
            "Test naming convention enforcement",
            "Validate code organization",
            "Check documentation coverage"
          ]
        }
      }
    },
    {
      "path": "${projectName}/development/standards/review",
      "title": "Code Review Process",
      "description": "Establish code review procedures and guidelines",
      "type": "TASK",
      "dependencies": ["${projectName}/development/standards"],
      "metadata": {
        "priority": "high",
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["danger", "commitlint", "semantic-release"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Review process documented",
            "Review checklist created",
            "Feedback guidelines established",
            "Review templates provided"
          ],
          "testCases": [
            "Test review process workflow",
            "Validate checklist completeness",
            "Review feedback effectiveness",
            "Verify template usage"
          ]
        }
      }
    },
    {
      "path": "${projectName}/development/workflow",
      "title": "Development Workflow Setup",
      "description": "Define development workflow and processes",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/development/standards"],
      "metadata": {
        "priority": "high",
        "tags": ["workflow", "process"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["husky", "lint-staged", "conventional-changelog"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Git workflow established",
            "Task management defined",
            "Release process documented",
            "Communication channels set"
          ],
          "testCases": [
            "Validate git workflow",
            "Test task management process",
            "Verify release procedures",
            "Check communication effectiveness"
          ]
        }
      }
    },
    {
      "path": "${projectName}/development/workflow/git",
      "title": "Git Workflow Setup",
      "description": "Define Git branching and versioning strategy",
      "type": "TASK",
      "dependencies": ["${projectName}/development/workflow"],
      "metadata": {
        "priority": "high",
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["husky", "commitlint", "standard-version"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Branching strategy defined",
            "Version control guidelines created",
            "Commit message standards set",
            "Release tagging rules established"
          ],
          "testCases": [
            "Test branch creation workflow",
            "Verify version control process",
            "Validate commit messages",
            "Check release tag format"
          ]
        }
      }
    },
    {
      "path": "${projectName}/development/workflow/tasks",
      "title": "Task Management Process",
      "description": "Define task management and tracking procedures",
      "type": "TASK",
      "dependencies": ["${projectName}/development/workflow"],
      "metadata": {
        "priority": "high",
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["jira-client", "github-api", "trello"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Task workflow documented",
            "Estimation guidelines created",
            "Progress tracking methods defined",
            "Status reporting templates provided"
          ],
          "testCases": [
            "Validate task workflow",
            "Test estimation process",
            "Check progress tracking",
            "Review status reports"
          ]
        }
      }
    },
    {
      "path": "${projectName}/development/quality",
      "title": "Quality Assurance Setup",
      "description": "Establish quality assurance processes",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/development/standards"],
      "metadata": {
        "priority": "high",
        "tags": ["quality", "testing"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["jest", "cypress", "codecov"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Testing strategy defined",
            "Quality metrics established",
            "Automation tools selected",
            "Coverage targets set"
          ],
          "testCases": [
            "Review testing strategy",
            "Validate quality metrics",
            "Test automation setup",
            "Check coverage reporting"
          ]
        }
      }
    },
    {
      "path": "${projectName}/development/quality/testing",
      "title": "Testing Strategy",
      "description": "Define comprehensive testing approach",
      "type": "TASK",
      "dependencies": ["${projectName}/development/quality"],
      "metadata": {
        "priority": "high",
        "technicalRequirements": {
          "language": "typescript",
          "framework": "jest",
          "dependencies": ["@testing-library/react", "@testing-library/jest-dom", "msw"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Test strategy documented",
            "Coverage requirements defined",
            "Testing tools configured",
            "Documentation templates created"
          ],
          "testCases": [
            "Review test documentation",
            "Validate coverage rules",
            "Test tool configuration",
            "Check template usage"
          ]
        }
      }
    },
    {
      "path": "${projectName}/development/quality/automation",
      "title": "Quality Automation",
      "description": "Set up automated quality checks",
      "type": "TASK",
      "dependencies": ["${projectName}/development/quality"],
      "metadata": {
        "priority": "high",
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["sonarqube-scanner", "lighthouse", "pa11y"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Linting rules configured",
            "Static analysis setup complete",
            "Test automation framework ready",
            "Quality gates defined"
          ],
          "testCases": [
            "Verify linting configuration",
            "Test static analysis",
            "Validate automation framework",
            "Check quality gates"
          ]
        }
      }
    }
  ]
}
