{
  "id": "software_engineer/devops_engineer",
  "name": "LLM DevOps Engineer Agent",
  "description": "Comprehensive DevOps engineering with focus on infrastructure automation, CI/CD pipelines, and operational excellence",
  "version": "1.1.0",
  "author": "Atlas Team",
  "tags": ["llm-agent", "devops", "infrastructure", "automation", "ci-cd"],
  "variables": [
    {
      "name": "projectName",
      "description": "Name of the project/product",
      "type": "string",
      "required": true
    },
    {
      "name": "teamScale",
      "description": "Size/scale of the team",
      "type": "string",
      "required": true,
      "default": "growth",
      "enum": ["startup", "growth", "enterprise"]
    },
    {
      "name": "securityLevel",
      "description": "Required security level",
      "type": "string",
      "required": false,
      "default": "standard",
      "enum": ["standard", "high", "regulated"]
    },
    {
      "name": "enableAutoScaling",
      "description": "Enable infrastructure auto-scaling",
      "type": "boolean",
      "required": false,
      "default": true
    },
    {
      "name": "deploymentFrequency",
      "description": "Target deployments per day",
      "type": "number",
      "required": false,
      "default": 4
    }
  ],
  "tasks": [
    {
      "path": "${projectName}",
      "title": "Project Root",
      "description": "Root task for project organization",
      "type": "MILESTONE",
      "metadata": {
        "priority": "high",
        "tags": ["project-root"]
      }
    },
    {
      "path": "${projectName}/infrastructure",
      "title": "Infrastructure Engineering",
      "description": "Overall infrastructure architecture, automation, and operations",
      "type": "MILESTONE",
      "dependencies": ["${projectName}"],
      "metadata": {
        "priority": "high",
        "tags": ["infrastructure", "devops"],
        "acceptanceCriteria": [
          "Infrastructure requirements analyzed",
          "Architecture designed and implemented",
          "CI/CD pipelines established",
          "Monitoring and security configured"
        ]
      }
    },
    {
      "path": "${projectName}/infrastructure/requirements",
      "title": "Infrastructure Requirements Analysis",
      "description": "Analyze and document infrastructure and operational requirements",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/infrastructure"],
      "metadata": {
        "priority": "high",
        "tags": ["infrastructure", "requirements"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "terraform",
          "dependencies": ["terraform", "aws-sdk", "azure-sdk"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Infrastructure requirements documented",
            "Scaling needs identified",
            "Performance targets defined",
            "Cost constraints established"
          ],
          "testCases": [
            "Validate infrastructure specs",
            "Review scaling requirements",
            "Test performance targets",
            "Verify cost estimates"
          ]
        }
      }
    },
    {
      "path": "${projectName}/infrastructure/design",
      "title": "Infrastructure Architecture Design",
      "description": "Design cloud infrastructure and deployment architecture",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/infrastructure/requirements"],
      "metadata": {
        "priority": "high",
        "tags": ["architecture", "infrastructure"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "terraform",
          "dependencies": ["terraform-aws", "terraform-azure", "pulumi"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Infrastructure design documented",
            "Network architecture defined",
            "Security groups configured",
            "Scaling policies designed"
          ],
          "testCases": [
            "Review infrastructure design",
            "Test network configuration",
            "Validate security setup",
            "Verify scaling policies"
          ]
        }
      }
    },
    {
      "path": "${projectName}/infrastructure/automation",
      "title": "Infrastructure Automation",
      "description": "Implement infrastructure as code and automation",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/infrastructure/design"],
      "metadata": {
        "priority": "high",
        "tags": ["automation", "infrastructure"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "terraform",
          "dependencies": ["terraform-provider-aws", "terraform-provider-kubernetes", "ansible"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Infrastructure code implemented",
            "Automation scripts created",
            "State management configured",
            "Documentation completed"
          ],
          "testCases": [
            "Test infrastructure deployment",
            "Validate automation scripts",
            "Verify state handling",
            "Review documentation"
          ]
        }
      }
    },
    {
      "path": "${projectName}/infrastructure/cicd",
      "title": "CI/CD Pipeline Setup",
      "description": "Implement continuous integration and deployment pipelines",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/infrastructure/automation"],
      "metadata": {
        "priority": "high",
        "tags": ["ci-cd", "automation"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["github-actions", "jenkins", "argocd"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "CI pipeline implemented",
            "CD pipeline configured",
            "Quality gates defined",
            "Deployment strategies documented"
          ],
          "testCases": [
            "Test CI pipeline flow",
            "Validate CD process",
            "Verify quality gates",
            "Review deployment strategies"
          ]
        }
      }
    },
    {
      "path": "${projectName}/infrastructure/monitoring",
      "title": "Monitoring and Observability Setup",
      "description": "Implement comprehensive monitoring and observability",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/infrastructure/cicd"],
      "metadata": {
        "priority": "high",
        "tags": ["monitoring", "observability"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["prometheus", "grafana", "elastic-apm"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Monitoring system configured",
            "Metrics collection setup",
            "Alerting rules defined",
            "Dashboards created"
          ],
          "testCases": [
            "Test monitoring system",
            "Validate metrics collection",
            "Verify alerting rules",
            "Review dashboards"
          ]
        }
      }
    },
    {
      "path": "${projectName}/infrastructure/security",
      "title": "Infrastructure Security Implementation",
      "description": "Implement infrastructure security measures",
      "type": "MILESTONE",
      "dependencies": ["${projectName}/infrastructure/monitoring"],
      "metadata": {
        "priority": "high",
        "tags": ["security", "infrastructure"],
        "technicalRequirements": {
          "language": "typescript",
          "framework": "node",
          "dependencies": ["vault", "cloudsploit", "trivy"],
          "environment": "Node.js v18+"
        },
        "acceptanceCriteria": {
          "criteria": [
            "Security controls implemented",
            "Access management configured",
            "Secrets management setup",
            "Compliance validated"
          ],
          "testCases": [
            "Test security controls",
            "Validate access management",
            "Verify secrets handling",
            "Check compliance status"
          ]
        }
      }
    }
  ]
}
